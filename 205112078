#include <sys/types.h>

#include <sys/stat.h>

#include <sys/ipc.h>

#include <sys/sem.h>
#include<stdio.h>
#include <fcntl.h>
#include<stdlib.h>
void P(int semId, int semNr)

{

    struct sembuf op = {semNr, -1, 0};

    semop(semId, &op, 1);

}

void V(int semId, int semNr)

{

    struct sembuf op = {semNr, 1, 0};

    semop(semId, &op, 1);

}

void copy(int fdSource, int fdDest, int semId)

{

    char c;

    int nr, term = 0;

    while (! term)

    {

        P(semId, 0);    // unique request permission

        if ((nr=read(fdSource, &c, 1)) != 1)

        { perror("EOF reached"); term = 1; }

        if (!term && (write(fdDest, &c, nr) != nr))

  { //perror("Write error"); 
    term = 1; }

        V(semId, 0);    // Permission release

    }

}

int main(int argc, char **argv)

{

    int id, pid, fdSource, fdDest;

    if (argc != 3) 
    {

        printf("Format: %s sorce_filename dest_filename\n", argv[0]);

        exit(1);

    }

    id = semget(30000, 1, IPC_CREAT | 0600);
    if (id < 0) 

    { 
         perror("Error creating semaphore"); 
         exit(2); 
    }

    if (semctl(id, 0, SETVAL, 1) < 0)/* performs the control operation specified by cmd on the semaphore 
                                      set identified by semid, or on the semnum-th semaphore of that set.*/

    { 
        perror("Error setting wave. SEM."); 
        exit(3); 
    }

    if ((fdSource = open(argv[1], O_RDONLY)) < 0)

    { 
       perror("Error opening file"); 
       exit(4); 
    }

    if ((fdDest = creat(argv[2], 0666)) < 0)

    { 
        perror("Error in creating file");
        exit(5); 
    }

    pid = fork();

    copy(fdSource, fdDest, id);

    if (pid) 
    {

      waitpid(pid, 0);

      semctl(id, 0, IPC_RMID, 0);

    }
}
